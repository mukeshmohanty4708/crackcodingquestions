
Partition: Write code to partition a linked list around a value x, such that all nodes less 
than x come before all nodes greater than or equal to x. If x is contained within the list 
the values of x only need to be after the elements less than x (see below). 
The partition element x can appear anywhere in the "right partition"; it does not need to appear between the left and right partitions.

EXAMPLE
Input: 3 -> 5 -> 8 -> 5 -> 10 ->2 -> 1[partition=5] Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode before = new ListNode(0);
        ListNode after = new ListNode(0);
        
        ListNode btemp = before;
        ListNode atemp = after;
        
        while(head != null){
            if(head.val < x){
                before.next = new ListNode(head.val);
                before = before.next;
            }
            else{
                after.next = new ListNode(head.val);
                after = after.next;
            }
            head = head.next;
        }
        after.next = null;
        before.next = atemp.next;
        
        return btemp.next;
    }
}
