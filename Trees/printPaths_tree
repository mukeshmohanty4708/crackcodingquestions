Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
    public int nsize = 0;
    public int[] arr = new int[256];
    public List<String> op = new ArrayList();
    
    public String printArray(int[] arr, int nsize){
        String str = "";
        for(int i = 0; i < nsize; i++){
            str += Integer.toString(arr[i]);
            if(i != nsize-1) str += ("->");
        }
        // System.out.println(str);
        return str;
    }
    public void printPaths(TreeNode root, int[] arr, int nsize){
        if(root == null) return;
        arr[nsize] = root.val;
        nsize++;
        
        if(root.left == null && root.right == null){
            System.out.println("arr");
            op.add(printArray(arr, nsize));
        }
        else{
            printPaths(root.left, arr, nsize);
            printPaths(root.right, arr, nsize);
        }
    }
    
    public List<String> binaryTreePaths(TreeNode root) {
        printPaths(root, arr, nsize);
        return(op);
    }
}
