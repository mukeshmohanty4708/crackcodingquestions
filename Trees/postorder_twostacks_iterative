/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> twostackiterative(TreeNode root, List<Integer> list){
        if(root == null) return list;
        
        Stack<TreeNode> s1 = new Stack();
        Stack<Integer> s2 = new Stack();
        
        s1.push(root);
        while(!s1.isEmpty()){
            TreeNode tmp = s1.peek();
            s1.pop();
            s2.push(tmp.val);
            if(tmp.left != null) s1.push(tmp.left);
            if(tmp.right != null) s1.push(tmp.right);
        }
        
        System.out.println(s2);
        while(!s2.isEmpty()){
            list.add(s2.peek());
            s2.pop();
        }
        return list;
        
    }
    
    
    
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList();
        list = twostackiterative(root, list);
        return list;
    }
}
