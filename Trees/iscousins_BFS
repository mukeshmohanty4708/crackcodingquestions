In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

Example 1:

Input: root = [1,2,3,4], x = 4, y = 3
Output: false

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
         
        Queue<TreeNode> que = new LinkedList();
        if(root == null) return false;
        
        int levelx = 1, levely = 1 ,level = 1;
        que.add(root);
        
        while(!que.isEmpty()){
            int nsize = que.size();
            
            while(nsize > 0){
                System.out.println(que.toString() + " LEVEL " + level);
                TreeNode tmp = que.remove();
            
                if(tmp.val == x)
                    levelx = level;
                if(tmp.val == y)
                    levely = level;

                if(tmp.left != null) que.add(tmp.left);
                if(tmp.right != null) que.add(tmp.right);
                nsize--;
            }
            level++;
        }
        
        if(levelx == levely)
            return true;
        
        return false;
        
    }
}
