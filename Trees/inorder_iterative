/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<Integer> inorderIterative(TreeNode root){
        List<Integer> list = new ArrayList();
        if(root == null) return list;
        
        Stack<TreeNode> stk = new Stack<TreeNode>();
        TreeNode curr = root;

        while(!stk.isEmpty() || curr != null){
            if(curr != null){
                stk.push(curr);
                System.out.println(stk);
                curr = curr.left;
            }
            else{
                curr = stk.peek();
                stk.pop();
                list.add(curr.val);
                System.out.println("stack pop: " + curr.val);
                curr = curr.right;
            }
        }
        return list;
        
    }
    
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        list = inorderIterative(root);
        return list;
    }
}
