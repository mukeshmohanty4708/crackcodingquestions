Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
(i.e., from left to right, then right to left for the next level and alternate between).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> arrlist = new ArrayList<>();
        Queue<TreeNode> que = new LinkedList<TreeNode>();
        int qSize, level = 1;
        
        if(root == null) return arrlist;
        que.offer(root);
        
        while(!que.isEmpty()){
            qSize = que.size();
            ArrayList<Integer> nlist = new ArrayList();
            
            while(qSize > 0){
                TreeNode tmp = que.remove();
                
                if(tmp.left != null) que.offer(tmp.left);
                if(tmp.right != null) que.offer(tmp.right);
                
                if (level % 2 == 0) 
                    nlist.add(0, tmp.val);
                else
                    nlist.add(tmp.val);
                qSize--;
            }
            
            arrlist.add(nlist);
            ++level;
        }
        
        return arrlist;
    }
}
