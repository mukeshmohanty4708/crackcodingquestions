Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:

The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.



class Solution {
    public String removeKdigits(String num, int k) {
        
        Stack<Integer> stk = new Stack<>();
        int len = num.length();
        
        if(len == k) return "0";
        
        for(int i = 0; i < len; i++){
            
            char ch = num.charAt(i);
            int el = Character.getNumericValue(ch);
            if(!stk.isEmpty() && stk.peek() > el && k > 0){
                stk.pop();
                k--;
            }
            stk.push(el);

        }
        System.out.println(stk);
        while(k > 0){
            stk.pop();
            k--;
        }
        
        String str = new String();
        while(!stk.isEmpty()){
            // str.insert(0, Integer.toString(stk.peek()));
            str = Integer.toString(stk.peek()) + str;
            stk.pop();
        }
        System.out.println(Integer.parseInt(str));
        int op = Integer.parseInt(str);
        
        
        return Integer.toString(op);
        
    }
}
